# Vi Editter :
###############
dd   # cut this line
3d   # cut three lines
yy   # copy this line
3y   # copy three lines
p    # paste
x    # delete char
3x   # delte three chars
w    # word foreward
b    # word backward
0    # begin of a line
o    # down new line
u    # Ctrl+Z
G    # go to the last line at file
v    # select some text ,, lines... chars ...  then press "d" to cut , or "y" to copy , then press "p" to paste
y    # copy after select with "v"
d    # cut after select with "v"

# Like Arrows , right , left , down , up :
h ,j , k , l  


################################################################
rsync :
########
    --delete : delete files that don’t exist on sender (system)
    -v : Verbose (try -vv for more detailed information)
    -e "ssh options" : specify the ssh as remote shell
    -a : archive mode
    -r : recurse into directories
    -z : compress file data

rsync --exclude 'root/' --exclude 'private/'  -av  --delete  /vz/ /Backup_SAN/vz/ 2>&1

rsync -v -e ssh jerry@openbsd.nixcraft.in:~/webroot.txt /tmp


# Task: Synchronize a remote directory with a local directory
    $ rsync -r -a -v -e "ssh -l jerry" --delete QWE.com:/webroot/ /local/webroot 

# Task: Synchronize a local directory with a remote directory
    $ rsync -r -a -v -e "ssh -l jerry" --delete /local/webroot QWE.com:/webroot


################################################################
Scp :
######
# Copy the file "foobar.txt" from a remote host to the local host
    $ scp your_username@remotehost.edu:foobar.txt /some/local/directory 

# Copy the file "foobar.txt" from the local host to a remote host
    $ scp foobar.txt your_username@remotehost.edu:/some/remote/directory


# Copy the directory "foo" from the local host to a remote host's directory "bar"
    $ scp -r foo your_username@remotehost.edu:/some/remote/directory/bar 

# Copy the file "foobar.txt" from remote host "rh1.edu" to remote host "rh2.edu"
    $ scp your_username@rh1.edu:/some/remote/directory/foobar.txt \
    your_username@rh2.edu:/some/remote/directory/ 

# Copying the files "foo.txt" and "bar.txt" from the local host to your home directory on the remote host
    $ scp foo.txt bar.txt your_username@remotehost.edu:~ 

# Copy the file "foobar.txt" from the local host to a remote host using port 2264
    $ scp -P 2264 foobar.txt your_username@remotehost.edu:/some/remote/directory 

################################################################
# Clear Ram memory cache :
   # 1. Clear PageCache only.
sync; echo 1 > /proc/sys/vm/drop_caches

   # 2. Clear dentries and inodes.
sync; echo 2 > /proc/sys/vm/drop_caches

   # 3. Clear PageCache, dentries and inodes.
sync; echo 3 > /proc/sys/vm/drop_caches 
 
   # Clear Ram & Swap :
echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'

################################################################
# Systemd :
   # Analyze the Boot Process :
   # to view information about the startup process in general, run this command:
systemd-analyze
   
   # To view how long each process took to start, run this command: 
systemd-analyze blame

   # To view all available unit files on your system:
systemctl list-unit-files

   # To list all running units:
systemctl list-units

   # To list all failed units:
systemctl –failed

  
# Manage Services :
####################

   # To view a list of enabled and disabled services :
systemctl list-unit-files –type=service

    systemctl start name.service
    systemctl stop name.service
    systemctl restart name.service
    systemctl reload name.service
    systemctl status name.service  	

    systemctl enable name.service
    systemctl disable name.service


    # You can “mask” a service or other unit to prevent it from starting up at all. 
    # You’ll need to unmask it before it can start in the future:
systemctl mask name.service
systemctl unmask name.service



################################################################
Awk :
######
# https://www.digitalocean.com/community/tutorials/how-to-use-the-awk-language-to-manipulate-text-in-linux

   # basic format of an awk command is :
awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse

   # print a file :
awk '{print}' /etc/fstab
 
   # print line which match a word , like grep :
awk '/UUID/' /etc/fstab

   # print line which start with a word :
awk '/^UUID/' /etc/fstab

   # file is delimited with colons (:) instead of whitespace.If we wanted to print out the first column of this file, we could type:
sudo awk 'BEGIN { FS=":"; } { print $1; }' /etc/passw

   # We can tell awk to only match at the beginning of the second column by using this command :
awk '$2 ~ /^sa/' favorite_food.txt

   # We can just as easily search for things that do not match by including the "!" character before the tilde (~). 
   # This command will return all lines that do not have a food that starts with "sa":
awk '$2 !~ /^sa/' favorite_food.txt

   # If we decide later on that we are only interested in lines where the above is true and the item number is less than 5 
awk '$2 !~ /^sa/ && $1 < 5' favorite_food.txt

   # 

   # We can use the BEGIN and END blocks to print simple information about the fields we are printing :

sudo awk 'BEGIN { FS=":"; print "User\t\tUID\t\tGID\t\tHome\t\tShell\n--------------"; }
{print $1,"\t\t",$3,"\t\t",$4,"\t\t",$6,"\t\t",$7;}
END { print "---------\nFile Complete" }' /etc/passwd

######## Output will be : #############

User        UID     GID     Home        Shell
--------------
root         0       0       /root       /bin/bash
daemon       1       1       /usr/sbin       /bin/sh
bin          2       2       /bin        /bin/sh
sys          3       3       /dev        /bin/sh
sync         4       65534       /bin        /bin/sync
. . .
---------
File Complete

  
  
   


################################################################
sed :
######

    # replace all matches and dont save :
sed 's/word_old/new_word/g' file

  # replace  the first occurence of 'a' in every line of the file and save it , -i to save to the same file :
sed -i 's/word_old/new_word/g' file

  # replace all matches and save it to new file :
sed -e 's/word_old/new_word/g' file > new_file

    # replace first match :
sed 's/find/replace/' file
 
    # To remove a specific character :
sed 's/a//' file

    # replace  1st character in every line :
sed 's/^.//' file

    # replaces only the 1st character since 'g' is not passed :
sed 's/.//' file
  
    # replace  last character of every line :
sed 's/.$//' file

    # remove the 1st and last character of every line in the same command: 
sed 's/.//;s/.$//' file

    #  remove first character only if it is a specific character: 
sed 's/^F//' file

    # remove last character only if it is a specific character: 
sed 's/x$//' file

    # remove 1st 3 characters of every line: 
sed 's/...//' file

    #  remove 1st n characters of every line: 
sed -r 's/.{4}//' file

    # To remove last n characters of every line: 
sed -r 's/.{3}$//' file

    # remove everything except the 1st n characters in every line: 
sed -r 's/(.{3}).*/\1/' file

    # remove everything except the last n characters in a file: 
sed -r 's/.*(.{3})/\1/' file

    # remove multiple characters present in a file: 
sed 's/[aoe]//g' file

    # delete only nth occurrence of a character in every line: 
sed 's/u//2' file

    # delete everything in a line followed by a character: 
sed 's/a.*//' file

    #  remove all digits present in every line of a file: 
$ sed 's/[0-9]//g' file

    #  remove all lower case alphabets present in every line: 
sed 's/[a-z]//g' file

    # To remove everything other than the lower case alphabets: 
sed 's/[^a-z]//g' file

    #  remove all alpha-numeric characters present in every line:
sed 's/[a-zA-Z0-9]//g' file

   # 







^	matches the beginning of the line
$	matches the end of the line
.	Matches any single character
(character)*	match arbitrarily many occurences of (character)
(character)?	Match 0 or 1 instance of (character)
[abcdef]	Match any character enclosed in [] (in this instance, a b c d e or f) ranges of characters such as [a-z] are permitted. The behaviour of this deserves more description. See the page on grep for more details about the syntax of lists.
[^abcdef]	Match any character NOT enclosed in [] (in this instance, any character other than a b c d e or f)








################################################################
# copy non-empty directory :
cp -r dire /path

# move non-empty directory :
mv dir /path



cp -n   # copy without override 
cp -i   # ask before override


postqueue -f                             # redial with messages , manupilate them


  # send public key to another server :
  # enable "PermitRootLogin yes" at the server which you want to ssh to , then :
cat ~/.ssh/id_rsa.pub | ssh user@hostname 'cat >> .ssh/authorized_keys'  
  # thats mean copy your public key to that server , put it at /root/.ssh/authorized_key  



  # Import Database via terminal :
<<<<<<< HEAD
mysql -u username -p databasename < filename.sql                 


  # format a flash memory or disk :
  # first "df -h" to know which one it is sdba2 , sdb4 ...
df -h
  # then unmount it :
umount /dev/sdb4
mkfs.ntfs /dev/sdb4  


  # Display all processes with its port that working on , netstat :
netstat -tunlp
=======
mysql -u username -p databasename < filename.sql    


  # cat file inside with expressions :
cat -Etv file              


  # Get public ip address in terminal :
wget http://ipinfo.io/ip -qO -


  # lsof command that display processes and what files they use
lsof 

  # Display process that use something like folder or file :
lsof 2>/dev/null | grep its_name      # then kill processes that displayed


mailq
postqueue -f

  # Grep and display 4 lines after grep word :
grep -A 4 word


  # delete first 100 lines in a file :
  sed -i 1,100d fileName
>>>>>>> 2ac3564d973d49583bc3bd7378ae93dd28c64156
